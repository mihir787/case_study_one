setwd(/Users/mihirparikh/school/6306_doing_ds/case_study_one)
setwd("/Users/mihirparikh/school/6306_doing_ds/case_study_one")
library(dplyr)
library(ggplot2)
#read in csv files and normalize column names
Beers <- read.csv("Beers.csv", sep = ",")
colnames(Beers) <- c("Name", "Beer_id", "ABV", "IBU", "Brewery_id", "Style", "Ounces")
Breweries <- read.csv("Breweries.csv", sep = ",")
colnames(Breweries) <- c("Brewery_id", "Name", "City", "State")
# a. How many breweries in each state?
summary(Breweries)
table(Breweries$State)
# b. Merge beer data with the breweries data. Print the first 6 observations and the last six observations to check the merged file
brewDataMerged <- merge(Beers, Breweries, by = "Brewery_id", all = TRUE)
head(brewDataMerged, 6)
tail(brewDataMerged, 6)
# c. Report the number of NA's in Each Column
sapply(brewDataMerged, function(x) sum(length(which(is.na(x)))))
# d. Compute the median alcohol content and international bitterness unit for each state. Plot a bar chart to compare.
stateGrouped <- group_by(brewDataMerged, State)
summarizedGroup <- summarize(stateGrouped, Median_alcohol = median(ABV, na.rm = TRUE), Median_IBU = median(IBU, na.rm = TRUE))
ggplot(data = summarizedGroup) + geom_bar(mapping = aes(x= State, y= Median_alcohol), stat="identity")
ggplot(data = summarizedGroup) + geom_bar(mapping = aes(x= State, y= Median_IBU), stat="identity")
# e.
#state with most alcoholic beer?
brewDataMerged[which.max(brewDataMerged$ABV),]
#state witb most bitter beer
brewDataMerged[which.max(brewDataMerged$IBU),]
#f. summary for ABV statistic
summary(brewDataMerged$ABV)
#g. relationship between the bitterness of the beer and its alcoholic content? Draw a scatter plot.
ggplot(brewDataMerged, aes(IBU, ABV))+
ggtitle("International Bitterness Units (IBU) vs. Alcohol Content (ABV)") +
geom_point(color="green") +
geom_smooth(method=lm,  se=FALSE, color="blue")
distinct(brewDataMerged)
distinct(brewDataMerged)
distinct
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(ggplot2)
#read in csv files and normalize column names
Beers <- read.csv("Beers.csv", sep = ",")
colnames(Beers) <- c("Name", "Beer_id", "ABV", "IBU", "Brewery_id", "Style", "Ounces")
Breweries <- read.csv("Breweries.csv", sep = ",")
colnames(Breweries) <- c("Brewery_id", "Name", "City", "State")
# a. How many breweries in each state?
summary(Breweries)
table(Breweries$State)
# b. Merge beer data with the breweries data. Print the first 6 observations and the last six observations to check the merged file
brewDataMerged <- merge(Beers, Breweries, by = "Brewery_id", all = TRUE)
head(brewDataMerged, 6)
tail(brewDataMerged, 6)
# c. Report the number of NA's in Each Column
sapply(brewDataMerged, function(x) sum(length(which(is.na(x)))))
# d. Compute the median alcohol content and international bitterness unit for each state. Plot a bar chart to compare.
stateGrouped <- group_by(brewDataMerged, State)
summarizedGroup <- summarize(stateGrouped, Median_alcohol = median(ABV, na.rm = TRUE), Median_IBU = median(IBU, na.rm = TRUE))
ggplot(data = summarizedGroup) + geom_bar(mapping = aes(x= State, y= Median_alcohol), stat="identity")
ggplot(data = summarizedGroup) + geom_bar(mapping = aes(x= State, y= Median_IBU), stat="identity")
# e.
#state with most alcoholic beer?
brewDataMerged[which.max(brewDataMerged$ABV),]
#state witb most bitter beer
brewDataMerged[which.max(brewDataMerged$IBU),]
#f. summary for ABV statistic
summary(brewDataMerged$ABV)
#g. relationship between the bitterness of the beer and its alcoholic content? Draw a scatter plot.
ggplot(brewDataMerged, aes(IBU, ABV))+
ggtitle("International Bitterness Units (IBU) vs. Alcohol Content (ABV)") +
geom_point(color="green") +
geom_smooth(method=lm,  se=FALSE, color="blue")
distinct(brewDataMerged)
View(Beers)
View(Breweries)
agrep("lasy", "1 lazy 2")
agrep("lasy", "bacon")
agrep("lasy", "lasy")
?apply
brewDataMerged
View(brewDataMerged)
colnames(brewDataMerged)
colnames(brewDataMerged) <- c("Brewery_id", "Beer_name", "Beer_id", "ABV", "IBU", "Style", "Ounces", "Brewery_name", "City", "State")
View(brewDataMerged)
summary(brewDataMerged)
source('~/school/6306_doing_ds/case_study_one/scratchwork.R')
namestotest <- Breweries$Name
duptable = data.frame(Index=as.numeric(),Name=as.character())
duptable
for (i in 1:length(namestotest)){
# Find potential duplicates
dup = agrep(namestotest[i],namestotest[-i],ignore.case = T, value = T, max.distance = .1, useBytes=FALSE)
name = ifelse(length(dup)>0,dup,"OK")
dupoccurance = data.frame(Index=i,Name = name)
duptable = rbind(duptable,dupoccurance)
}
duptable=subset(duptable,duptable$Name!="OK")
duptable = duptable[order(duptable$Name),] # Sort to find true duplicates
head(duptable)
View(duptable)
source('~/school/6306_doing_ds/case_study_one/scratchwork.R')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(stringr)
library(tidyverse)
library(ggplot2)
library(kableExtra)
install.packages(kableExtra)
install.packages("kableExtra")
library(stringr)
library(tidyverse)
library(ggplot2)
library(kableExtra)
Breweries <- read.csv("Breweries.csv", header=TRUE, sep = ',', stringsAsFactors = FALSE)
# Check City spelling
Breweries <- Breweries[with(Breweries, order(State,City,Name)),]
BreweriesClean <- Breweries
BreweriesClean <- BreweriesClean[with(BreweriesClean, order(Brew_ID)),]
# Misspelled City Names, researched official spelling
BreweriesClean[c(59,139),3] <- "Saint Paul"
BreweriesClean[130,3] <- "St. Marys"
BreweriesClean[68,3] <- "St. Petersburg"
BreweriesClean[339,3] <- "St. Johns"
BreweriesClean[c(378,457),3] <- "Menomonie"
BreweriesClean[69,3] <- "Mount Airy"
BreweriesClean[385,3] <- "Mount Pleasant"
# Incorrect State for given City
BreweriesClean[96,4] <- "MI"
# Check for duplicate Breweries after removing Brewery and Brewing Company
BreweriesClean$BrewDups = BreweriesClean$Name
# Remove "Brewery", "Brewing Company", "Brewing", "Beer Co.",
BreweriesClean$BrewDups <- str_replace_all(BreweriesClean$BrewDups, "Brewery", "")
BreweriesClean$BrewDups <- str_replace_all(BreweriesClean$BrewDups, "Brewing", "")
BreweriesClean$BrewDups <- str_replace_all(BreweriesClean$BrewDups, "Beer", "")
BreweriesClean$BrewDups <- str_replace_all(BreweriesClean$BrewDups, "Cider", "")
BreweriesClean$BrewDups <- str_replace_all(BreweriesClean$BrewDups, "Company", "")
BreweriesClean$BrewDups <- str_replace_all(BreweriesClean$BrewDups, "co.", "")
BreweriesClean$BrewDups <- str_replace_all(BreweriesClean$BrewDups, " ", "")
# Convert all characters to lower so we can better find potential duplicates
BreweriesClean$BrewDups <- tolower(BreweriesClean$BrewDups)
# Paste Name converted to lower, City, and State for matching duplicates
BreweriesClean <- unite(BreweriesClean, BrewDupsFreq, BrewDups, City, State, sep = ",", remove = FALSE)
# Determine if multiples are present
dupNames <- as.data.frame(table(BreweriesClean$BrewDupsFreq))
dupNames <- subset(dupNames, dupNames$Freq>1)
BreweriesCleanDups <- BreweriesClean[BreweriesClean$BrewDupsFreq %in%  dupNames$Var1,]
BreweriesCleanDups <- BreweriesCleanDups[order(BreweriesCleanDups$BrewDupsFreq),]
# Review results
knitr::kable(BreweriesCleanDups,caption = "Potential Duplicates", row.names = FALSE, "html") %>%
kable_styling(bootstrap_options = c("striped","hover","condensed"))
# Fix based on observations and other data discovery
BreweriesClean[2,2] <- "Against The Grain Brewery"
BreweriesClean[147,2] <- "Angrew Minnow Brewing Company"
BreweriesClean[197,2] <- "Goose Island Brewing Company"
BreweriesClean[380,2] <- "Grey Sail Brewing Company"
BreweriesClean[396,2] <- "Hops & Grains Brewing Company"
# Brew_ID with Duplicate Rows: 2 & 63, 89 & 197, 147 & 543, 378 & 457, 59 & 139
BreweriesClean$BrewDupsFreq <- NULL
BreweriesClean$BrewDups <- NULL
# Make use of cleaned data set
BreweryByState <- table(factor(BreweriesClean$State))
BreweryByState <- data.frame(BreweryByState)
# Rename columns to something meaningful
colnames(BreweryByState) <- c('State','Count')
knitr::kable(BreweryByState,caption = "Breweries by State",  "html") %>%
kable_styling(full_width = F, position = "center", bootstrap_options = c("striped","hover","condensed")) %>%
column_spec(1, bold = T, width = "1in") %>%
column_spec(2, width = "1in") %>%
scroll_box(width = "2in", height = "6in")
View(BreweryByState)
range(BreweryByState$Count)
# Read in csv file containing Beer details
Beers <- read.csv("Beers.csv", header=TRUE, sep = ',')
# Merge the data on Beers.Brewery_Id and Breweries.Brew_ID
df_merge <- merge(Beers, Breweries, by.x="Brewery_id", by.y = "Brew_ID")
# Give the columns more meaningful name
# Rename column 'Name' from Beers data
colnames(df_merge)[2] <- "Beer_name"
# Rename column 'Name' from Breweries data
colnames(df_merge)[8] <- "Brewery_name"
# Arrange the columns in more meaningful order
df_merge <- df_merge[c("Brewery_id","Brewery_name","Beer_ID","Beer_name",
"ABV","IBU","Style","Ounces", "City","State")]
# Show first 6 rows of merged data
head_merge = head(df_merge,6)
knitr::kable(head_merge,caption = "First 6 Rows",row.names = FALSE, "html") %>%
kable_styling(bootstrap_options = c("striped","hover","condensed"))
# Show last 6 rows of merged data
tail_merge = tail(df_merge, 6)
knitr::kable(tail_merge,caption = "Last 6 Rows", row.names = FALSE, "html") %>%
kable_styling(bootstrap_options = c("striped","hover","condensed"))
View(Beers)
View(Beers)
View(head_merge)
View(tail_merge)
View(head_merge)
View(head_merge)
View(Beers)
sapply(Beers, function(x) sum(is.na(x)))
range(Beers$Ounces)
# Generate the median of alcohol content and international bitterness unit for each State
df_merge_ABV <- na.omit(data.frame(State=df_merge$State, ABV=df_merge$ABV)) # Remove NA values
df_merge_IBU <- na.omit(data.frame(State=df_merge$State, IBU=df_merge$IBU)) # Remove NA values
MedianABV <- tapply(df_merge_ABV$ABV,df_merge_ABV$State,median)
MedianIBU <- tapply(df_merge_IBU$IBU,df_merge_IBU$State,median)
MedianABV <- as.data.frame(MedianABV)
MedianABV$State <- rownames(MedianABV)
rownames(MedianABV) <- NULL
MedianABV$State <- factor(MedianABV$State, levels = MedianABV[order(MedianABV$MedianABV), "State"])
MedianIBU <- as.data.frame(MedianIBU)
MedianIBU$State <- rownames(MedianIBU)
rownames(MedianIBU) <- NULL
MedianIBU <- na.omit(MedianIBU) # SD had 1 value, the median function generated a null
MedianIBU$State <- factor(MedianIBU$State, levels = MedianIBU[order(MedianIBU$MedianIBU), "State"])
# Plot MedianABV by State
ggplot(data=MedianABV, aes(x=State, y=MedianABV)) +
geom_bar(stat='identity', color='black', fill='light blue') +
ylab("MedianABV") + xlab("State") +
ggtitle("MedianABV by State") +
coord_flip()
# Plot MedianIBU by State
ggplot(data=MedianIBU, aes(x=State, y=MedianIBU)) +
geom_bar(stat='identity', color='black', fill='light green') +
ylab("MedianIBU") + xlab("State") +
ggtitle("MedianIBU by State") +
coord_flip()
range(df_merge_ABV$ABV)
range(df_merge_IBU$IBU)
# Sort data to determine State with highest ABV
# Largest ABV is .125 within Colorado
TopABV <- df_merge[order(-df_merge$ABV),]
TopABV <- TopABV[1,c(5,10)]
print(TopABV, row.names = FALSE)
# Sort data to determine State with highest IBU
# Largest IBU is 138 within Oregon
TopIBU <- df_merge[order(-df_merge$IBU),]
TopIBU <- TopIBU[1,c(6,10)]
print(TopIBU, row.names = FALSE)
summaryABV <- summary(df_merge$ABV)
summaryABV
